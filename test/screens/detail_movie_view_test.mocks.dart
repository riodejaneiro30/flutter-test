// Mocks generated by Mockito 5.0.15 from annotations
// in moviedb/test/screens/detail_movie_view_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:flutter/src/widgets/navigator.dart' as _i13;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:moviedb/core/models/actor.dart' as _i10;
import 'package:moviedb/core/models/movie.dart' as _i12;
import 'package:moviedb/core/models/movie_detail.dart' as _i3;
import 'package:moviedb/core/models/video_response.dart' as _i4;
import 'package:moviedb/core/services/movie_service.dart' as _i11;
import 'package:moviedb/detail/list_cast_view_model.dart' as _i9;
import 'package:moviedb/detail/movie_detail_view_model.dart' as _i5;
import 'package:moviedb/detail/video_trailer_view_model.dart' as _i8;
import 'package:state_notifier/state_notifier.dart' as _i7;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeAsyncValue_0<T> extends _i1.Fake implements _i2.AsyncValue<T> {}

class _FakeMovieDetail_1 extends _i1.Fake implements _i3.MovieDetail {}

class _FakeVideoResponse_2 extends _i1.Fake implements _i4.VideoResponse {}

/// A class which mocks [DetailMovieViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailMovieViewModel extends _i1.Mock
    implements _i5.DetailMovieViewModel {
  MockDetailMovieViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i2.ErrorListener? _onError) =>
      super.noSuchMethod(Invocation.setter(#onError, _onError),
          returnValueForMissingStub: null);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  _i6.Stream<_i2.AsyncValue<_i3.MovieDetail>> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.AsyncValue<_i3.MovieDetail>>.empty())
          as _i6.Stream<_i2.AsyncValue<_i3.MovieDetail>>);
  @override
  _i2.AsyncValue<_i3.MovieDetail> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeAsyncValue_0<_i3.MovieDetail>())
          as _i2.AsyncValue<_i3.MovieDetail>);
  @override
  set state(_i2.AsyncValue<_i3.MovieDetail>? value) =>
      super.noSuchMethod(Invocation.setter(#state, value),
          returnValueForMissingStub: null);
  @override
  _i2.AsyncValue<_i3.MovieDetail> get debugState =>
      (super.noSuchMethod(Invocation.getter(#debugState),
              returnValue: _FakeAsyncValue_0<_i3.MovieDetail>())
          as _i2.AsyncValue<_i3.MovieDetail>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void loadDataById(int? id) =>
      super.noSuchMethod(Invocation.method(#loadDataById, [id]),
          returnValueForMissingStub: null);
  @override
  _i2.RemoveListener addListener(
          _i7.Listener<_i2.AsyncValue<_i3.MovieDetail>>? listener,
          {bool? fireImmediately = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addListener, [listener], {#fireImmediately: fireImmediately}),
          returnValue: () {}) as _i2.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [VideoTrailerViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoTrailerViewModel extends _i1.Mock
    implements _i8.VideoTrailerViewModel {
  MockVideoTrailerViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i2.ErrorListener? _onError) =>
      super.noSuchMethod(Invocation.setter(#onError, _onError),
          returnValueForMissingStub: null);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  _i6.Stream<_i2.AsyncValue<_i4.VideoResponse>> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.AsyncValue<_i4.VideoResponse>>.empty())
          as _i6.Stream<_i2.AsyncValue<_i4.VideoResponse>>);
  @override
  _i2.AsyncValue<_i4.VideoResponse> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeAsyncValue_0<_i4.VideoResponse>())
          as _i2.AsyncValue<_i4.VideoResponse>);
  @override
  set state(_i2.AsyncValue<_i4.VideoResponse>? value) =>
      super.noSuchMethod(Invocation.setter(#state, value),
          returnValueForMissingStub: null);
  @override
  _i2.AsyncValue<_i4.VideoResponse> get debugState =>
      (super.noSuchMethod(Invocation.getter(#debugState),
              returnValue: _FakeAsyncValue_0<_i4.VideoResponse>())
          as _i2.AsyncValue<_i4.VideoResponse>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void loadDataById(int? id) =>
      super.noSuchMethod(Invocation.method(#loadDataById, [id]),
          returnValueForMissingStub: null);
  @override
  _i2.RemoveListener addListener(
          _i7.Listener<_i2.AsyncValue<_i4.VideoResponse>>? listener,
          {bool? fireImmediately = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addListener, [listener], {#fireImmediately: fireImmediately}),
          returnValue: () {}) as _i2.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ListActorViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockListActorViewModel extends _i1.Mock
    implements _i9.ListActorViewModel {
  MockListActorViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i2.ErrorListener? _onError) =>
      super.noSuchMethod(Invocation.setter(#onError, _onError),
          returnValueForMissingStub: null);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  _i6.Stream<_i2.AsyncValue<List<_i10.Actor>>> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.AsyncValue<List<_i10.Actor>>>.empty())
          as _i6.Stream<_i2.AsyncValue<List<_i10.Actor>>>);
  @override
  _i2.AsyncValue<List<_i10.Actor>> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeAsyncValue_0<List<_i10.Actor>>())
          as _i2.AsyncValue<List<_i10.Actor>>);
  @override
  set state(_i2.AsyncValue<List<_i10.Actor>>? value) =>
      super.noSuchMethod(Invocation.setter(#state, value),
          returnValueForMissingStub: null);
  @override
  _i2.AsyncValue<List<_i10.Actor>> get debugState =>
      (super.noSuchMethod(Invocation.getter(#debugState),
              returnValue: _FakeAsyncValue_0<List<_i10.Actor>>())
          as _i2.AsyncValue<List<_i10.Actor>>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void loadDataById(int? id) =>
      super.noSuchMethod(Invocation.method(#loadDataById, [id]),
          returnValueForMissingStub: null);
  @override
  _i2.RemoveListener addListener(
          _i7.Listener<_i2.AsyncValue<List<_i10.Actor>>>? listener,
          {bool? fireImmediately = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addListener, [listener], {#fireImmediately: fireImmediately}),
          returnValue: () {}) as _i2.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MovieService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieService extends _i1.Mock implements _i11.MovieService {
  MockMovieService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i12.Movie>> getPopularMovie(int? page) =>
      (super.noSuchMethod(Invocation.method(#getPopularMovie, [page]),
              returnValue: Future<List<_i12.Movie>>.value(<_i12.Movie>[]))
          as _i6.Future<List<_i12.Movie>>);
  @override
  _i6.Future<List<_i12.Movie>> getUpcoming(int? page, int? pageSize) =>
      (super.noSuchMethod(Invocation.method(#getUpcoming, [page, pageSize]),
              returnValue: Future<List<_i12.Movie>>.value(<_i12.Movie>[]))
          as _i6.Future<List<_i12.Movie>>);
  @override
  _i6.Future<_i3.MovieDetail> getMovieById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieById, [id]),
              returnValue: Future<_i3.MovieDetail>.value(_FakeMovieDetail_1()))
          as _i6.Future<_i3.MovieDetail>);
  @override
  _i6.Future<_i4.VideoResponse> getVideoById(int? id) => (super.noSuchMethod(
          Invocation.method(#getVideoById, [id]),
          returnValue: Future<_i4.VideoResponse>.value(_FakeVideoResponse_2()))
      as _i6.Future<_i4.VideoResponse>);
  @override
  _i6.Future<List<_i10.Actor>> getCastById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getCastById, [id]),
              returnValue: Future<List<_i10.Actor>>.value(<_i10.Actor>[]))
          as _i6.Future<List<_i10.Actor>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i13.NavigatorObserver {
  @override
  void didPush(
          _i13.Route<dynamic>? route, _i13.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i13.Route<dynamic>? route, _i13.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i13.Route<dynamic>? route, _i13.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i13.Route<dynamic>? newRoute, _i13.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i13.Route<dynamic>? route, _i13.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
